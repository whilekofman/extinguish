{"version":3,"file":"main.js","mappings":"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","sources":["webpack://extinguish/./src/scripts/board.js","webpack://extinguish/./src/scripts/extinguish-view.js","webpack://extinguish/./src/scripts/game.js","webpack://extinguish/./src/scripts/splash.js","webpack://extinguish/webpack/bootstrap","webpack://extinguish/./src/index.js"],"sourcesContent":["class Board {\n    constructor() {\n        this.grid = Board.makeGrid();\n    }\n\n\n    static makeGrid() {\n        const grid = [];\n        for (let i = 0; i < 5; i++) {\n            let posValue = false\n            let row = []\n            for (let j = 0; j < 5; j++) {\n                if (i % 2 === 0) posValue = true\n                row.push(posValue);\n            }\n            grid.push(row);\n            grid[0][1] = true\n            grid[0][2] = true\n            grid[0][3] = true\n            // debugger\n            // grid[2][0] = true\n\n            // grid[1][2] = true\n        }\n        return grid;\n    }\n\n    winRound(){\n        for(let i = 0; i < this.grid.length; i++){\n            let row = this.grid[i]\n            for (let col = 0; col < row.length; col++){\n                if (row[col] === true) return false \n            }\n        }\n        // debugger\n        return true\n    }\n    \n    changeState(pos){\n        // let tile = this.grid[pos[0]][pos[1]] \n        let [row, col] = pos\n        // debugger\n        if (this.grid[row][col] === false){\n            this.grid[row][col] = true\n        } else {\n            this.grid[row][col] = false\n        }\n        // debugger\n        // console.log(this.winRound())\n\n        // debugger\n    }\n\n    positionAdjuster(pos){\n        const posChangers = [\n            [0, 1], //one right\n            [1, 0], //one down\n            [0, -1], //one left\n            [-1, 0] //one up\n        ]\n        const end = this.grid.length - 1\n        const [row, col] = pos\n        if (row === 0 && col === 0) {\n           return posChangers.slice(0, 2)\n        } else if (row === 0 && col === end) {\n            return posChangers.slice(1, 3)\n        } else if (row === 0) {\n            return posChangers.slice(0, 3)\n        } else if (row === end && col === 0){\n            return [posChangers[0]].concat(posChangers.slice(-1))\n        } else if (row === end && col === end){ \n            return posChangers.slice(2)\n        } else if (row === end) {\n            return [posChangers[0]].concat(posChangers.slice(2))\n        } else if (col === end){\n            return posChangers.slice(1)\n        } else if (col === 0){\n            return posChangers.slice(0, 2).concat([posChangers[3]])\n        } else {\n            return posChangers\n        }\n\n\n    }\n\n    moveMatrix(pos) {\n\n        const [row, col] = pos\n        const neighbors = []\n        // neighbors.push(this.positionAdjuster(pos))\n        this.positionAdjuster(pos).forEach(ele => {\n                let [x, y] = ele\n                neighbors.push([row + x, col + y])\n        })\n        return neighbors\n    }\n}\n\n\n\nBoard.marks = [\n    'ðŸŒ³ðŸŒ³ðŸŒ³ðŸŒ³', \n    'ðŸ”¥ðŸ”¥ðŸ”¥ðŸ”¥'\n]\n\nmodule.exports = Board;\n\n\n//not sure if this will reain static down the line, may allow variation on grid size\n// if (this.grid[pos[0]][pos[1]] === 'off') {\n//     this.grid[pos[0]][pos[1]] = 'on'\n// } else {\n//     this.grid[pos[0]][pos[1]] = 'off'\n// }\n// // debugger\n// console.log(this.winRound())\n\n// let tile = this.grid[pos[0]][pos[1]]\n// // debugger\n// if (tile === false) {\n//     tile = true\n// } else {\n//     tile = false\n// }\n// debugger\n// console.log(this.winRound())\n\n// debugger...\n\n\n        // if (row === 0 && col === 0) {\n        //     const posAdjusters = posChangers.slice(0, 2)\n        //     posAdjusters.forEach(ele => {\n        //         let [x, y] = ele\n        //         neighbors.push([row + x, col + y])\n        //     })\n        // } else if (row === 0 && col === this.grid.length -1){\n        //     const posAdjusters = posChangers.slice(1,3)\n        //     posAdjusters.forEach(ele => {\n        //         let [x, y] = ele\n        //         // debugger\n        //         neighbors.push([row + x, col + y])\n        //     })\n        // }\n","// export class View\nconst Board = require(\"./board.js\")\n\nclass View {\n    constructor(htmlEl, board){\n        this.board = new board()\n        this.htmlEl = htmlEl\n  \n        this.setUpBoard(htmlEl)\n        \n        this.registerClick()\n        \n    }\n    setUpBoard(htmlEl) {\n        const ul = document.createElement('ul')\n        this.board.grid.forEach ((row, rIdx) => {\n            row.forEach((tile, cIdx) => {\n                let state = tile\n                let pos = [rIdx, cIdx]\n                let li = document.createElement('li');\n                li.dataset.id = `${JSON.stringify(pos)}`\n                // li.className = `${state}`\n                li.classList.add(`${state}`, 'boardpositions')\n                if (li.classList.contains('false')){\n                    li.innerText = `${Board.marks[0]}`\n                } else {\n                    li.innerText = `${Board.marks[1]}`\n                }\n                ul.append(li)\n                \n            })\n        })\n        ul.className= \"game-grid\"\n        htmlEl.append(ul)\n    }\n\n    redrawGrid(){\n        let allLi = this.htmlEl.getElementsByClassName(\"boardpositions\")\n        for(let li of allLi) {\n            if (li.classList.contains('false')) {\n                li.innerText = `${Board.marks[0]}`\n            } else {\n                li.innerText = `${Board.marks[1]}`\n            }\n        }\n\n    }\n\n    registerClick() {\n        const ul = document.querySelector('.game-grid')\n        // debugger\n        ul.addEventListener('click', (e) => {\n            const tile = e.target\n            const tilePosition = JSON.parse(tile.dataset.id) \n            this.changeClass(tile) \n            this.board.changeState(tilePosition)    \n            let neighboringTiles = this.board.moveMatrix(tilePosition)\n            console.log(neighboringTiles)\n            for (let pos of neighboringTiles) {\n                this.board.changeState(pos)    \n                const dataId = JSON.stringify(pos)\n                const tile = document.querySelector(`[data-id=\"${dataId}\"]`) \n                this.changeClass(tile)\n            }\n            if(this.board.winRound()) console.log('congratulations!') \n            this.redrawGrid()\n        })\n    } \n\n    changeClass(li){\n        if (li.classList.contains('true')) {\n            li.classList.replace('true', 'false');\n        } else if (li.classList.contains('false')) {\n            li.classList.replace('false', 'true')\n        }\n    }\n\n}\n\n\n\nmodule.exports = View;\n\n// console.log(row)\n// let pos = col\n\n// // let pos = [row, col]\n// // debugger\n// let li = document.createElement('li');\n// li.dataset.id = `${JSON.stringify([row, col])}`\n// li.dataset.id = `${JSON.stringify((pos[0],pos[1]))}`\n\n// li.className = 'boardpositions'\n// li.innerText = `${pos}`\n// ul.append(li) \n        // for (let i = 0; i < 5; i++) {\n        //     for (let j = 0; j < 5; j++) {\n        //         let pos = [i, j]\n        //         let li = document.createElement('li');\n        //         li.dataset.id = `${JSON.stringify(pos)}`\n        //         li.className = 'boardpositions'\n        //         li.innerText = `${pos}` //hopefully there are 25 but will settle for 5`\n        //         ul.append(li)\n        //     }\n        // }","const Board = require(\"./board\")\n\nclass Game {\n    constructor() {\n        this.grid = new Board()\n        console.log(this.grid)\n        // console.log(winRound)\n    }\n\n    moveMatrix(pos){\n        const posChangers = [\n            [0, 1], //one right\n            [1, 0], //one down\n            [-1, 0] //one up\n            [0, -1] //one left\n        ]\n\n        const [row, col] = pos\n        const neighbors = []\n        \n        findNeighbors = (row, col) => {\n            if (row === 0 && col === 0){\n                const posAdjusters = posChangers.slice(0, 1)\n                posAdjusters.forEach(ele => {\n                    let [x, y] = ele\n                    neighbors.push([row + x, col + y])\n                })\n            }\n        }\n        \n        return findNeighbors(row, col)\n    }\n\n\n\n}\n\nmodule.exports = Game;\n","class Splash {\n    constructor(htmlEl) {\n\n        this.htmlEl = htmlEl\n\n    }\n\n    displaySplash(htmlEl){\n        console.log(htmlEl)\n        let confirmButton = htmlEl.createElement('button')\n        button.innerText = \"Confirm\"\n        this.htmlEl.append(confirmButton)\n    }\n}\n\nmodule.exports = Splash;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","const View = require(\"../src/scripts/extinguish-view.js\")\nconst Game = require(\"../src/scripts/game.js\")\nconst Board = require(\"../src/scripts/board.js\")\nconst Splash = require(\"../src/scripts/splash.js\")\nwindow.View = View;\ndocument.addEventListener('DOMContentLoaded', () => {\n    const main = document.getElementById('gameboard')\n    // new View(main, Game);\n    const splashScreen = document.getElementById(\"splash\") \n    new View(main, Board);\n    new Splash(splashScreen)\n    \n})"],"names":["Board","constructor","this","grid","makeGrid","i","posValue","row","j","push","winRound","length","col","changeState","pos","positionAdjuster","posChangers","end","slice","concat","moveMatrix","neighbors","forEach","ele","x","y","marks","module","exports","require","htmlEl","board","setUpBoard","registerClick","ul","document","createElement","rIdx","tile","cIdx","state","li","dataset","id","JSON","stringify","classList","add","contains","innerText","append","className","redrawGrid","allLi","getElementsByClassName","querySelector","addEventListener","e","target","tilePosition","parse","changeClass","neighboringTiles","console","log","dataId","replace","findNeighbors","displaySplash","confirmButton","button","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","View","Splash","window","main","getElementById","splashScreen"],"sourceRoot":""}